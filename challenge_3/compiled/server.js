const express = require('express');
const app = express();
const port = 4568;

const parser = require('body-parser');
const morgan = require('morgan');
const path = require('path');
const cors = require('cors');
const mysql = require('mysql');

app.listen(port, () => {
  console.log(`Server is listening on port ${port}`);
});

app.use(parser.json());
app.use(parser.urlencoded());
app.use(cors());
app.use(express.static('public'));

// Establish connection with database using mysql.createConnection

const db = mysql.createConnection({
  host: 'localhost',
  user: 'trevor',
  password: 'flamingo',
  database: 'shoppingcart'
});

db.connect();

// Define model functions for interactions with DB
const postUsers = (userInfo, callback) => {
  let queryString = 'INSERT INTO users VALUES(0, ?, ?, ?, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL)';
  let queryArgs = [userInfo.name, userInfo.email, userInfo.password];

  db.query(queryString, queryArgs, (err, results) => {
    if (err) {
      console.log('Logging error from insert => ', err);
      callback(err);
    }
    console.log('Query inserted successfully, gave back these results => ', results);
    callback(results);
  });
};

// Set up routes to appropriate functions
app.post('/users', (req, res) => {
  var userInput = JSON.parse(req.body.json);
  console.log('Logging userInput obj => ', userInput);
  postUsers(userInput, (err, results) => {
    if (err) {
      res.sendStatus(404);
    }
    res.send(results);
  });
});

app.post('/addresses', (req, res) => {});

app.post('/cards', (req, res) => {});

// Set up DBs in separate file
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NlcnZlci5qcyJdLCJuYW1lcyI6WyJleHByZXNzIiwicmVxdWlyZSIsImFwcCIsInBvcnQiLCJwYXJzZXIiLCJtb3JnYW4iLCJwYXRoIiwiY29ycyIsIm15c3FsIiwibGlzdGVuIiwiY29uc29sZSIsImxvZyIsInVzZSIsImpzb24iLCJ1cmxlbmNvZGVkIiwic3RhdGljIiwiZGIiLCJjcmVhdGVDb25uZWN0aW9uIiwiaG9zdCIsInVzZXIiLCJwYXNzd29yZCIsImRhdGFiYXNlIiwiY29ubmVjdCIsInBvc3RVc2VycyIsInVzZXJJbmZvIiwiY2FsbGJhY2siLCJxdWVyeVN0cmluZyIsInF1ZXJ5QXJncyIsIm5hbWUiLCJlbWFpbCIsInF1ZXJ5IiwiZXJyIiwicmVzdWx0cyIsInBvc3QiLCJyZXEiLCJyZXMiLCJ1c2VySW5wdXQiLCJKU09OIiwicGFyc2UiLCJib2R5Iiwic2VuZFN0YXR1cyIsInNlbmQiXSwibWFwcGluZ3MiOiJBQUFBLE1BQU1BLFVBQVVDLFFBQVEsU0FBUixDQUFoQjtBQUNBLE1BQU1DLE1BQU1GLFNBQVo7QUFDQSxNQUFNRyxPQUFPLElBQWI7O0FBRUEsTUFBTUMsU0FBU0gsUUFBUSxhQUFSLENBQWY7QUFDQSxNQUFNSSxTQUFTSixRQUFRLFFBQVIsQ0FBZjtBQUNBLE1BQU1LLE9BQU9MLFFBQVEsTUFBUixDQUFiO0FBQ0EsTUFBTU0sT0FBT04sUUFBUSxNQUFSLENBQWI7QUFDQSxNQUFNTyxRQUFRUCxRQUFRLE9BQVIsQ0FBZDs7QUFFQUMsSUFBSU8sTUFBSixDQUFXTixJQUFYLEVBQWlCLE1BQU07QUFBQ08sVUFBUUMsR0FBUixDQUFhLCtCQUE4QlIsSUFBSyxFQUFoRDtBQUFtRCxDQUEzRTs7QUFFQUQsSUFBSVUsR0FBSixDQUFRUixPQUFPUyxJQUFQLEVBQVI7QUFDQVgsSUFBSVUsR0FBSixDQUFRUixPQUFPVSxVQUFQLEVBQVI7QUFDQVosSUFBSVUsR0FBSixDQUFRTCxNQUFSO0FBQ0FMLElBQUlVLEdBQUosQ0FBUVosUUFBUWUsTUFBUixDQUFlLFFBQWYsQ0FBUjs7QUFFQTs7QUFFQSxNQUFNQyxLQUFLUixNQUFNUyxnQkFBTixDQUF1QjtBQUNoQ0MsUUFBTSxXQUQwQjtBQUVoQ0MsUUFBTSxRQUYwQjtBQUdoQ0MsWUFBVSxVQUhzQjtBQUloQ0MsWUFBVTtBQUpzQixDQUF2QixDQUFYOztBQU9BTCxHQUFHTSxPQUFIOztBQUVBO0FBQ0EsTUFBTUMsWUFBWSxDQUFDQyxRQUFELEVBQVdDLFFBQVgsS0FBd0I7QUFDeEMsTUFBSUMsY0FBYyw0RkFBbEI7QUFDQSxNQUFJQyxZQUFZLENBQUNILFNBQVNJLElBQVYsRUFBZ0JKLFNBQVNLLEtBQXpCLEVBQWdDTCxTQUFTSixRQUF6QyxDQUFoQjs7QUFFQUosS0FBR2MsS0FBSCxDQUFTSixXQUFULEVBQXNCQyxTQUF0QixFQUFpQyxDQUFDSSxHQUFELEVBQU1DLE9BQU4sS0FBa0I7QUFDakQsUUFBSUQsR0FBSixFQUFTO0FBQ1ByQixjQUFRQyxHQUFSLENBQVksK0JBQVosRUFBNkNvQixHQUE3QztBQUNBTixlQUFTTSxHQUFUO0FBQ0Q7QUFDRHJCLFlBQVFDLEdBQVIsQ0FBWSwwREFBWixFQUF3RXFCLE9BQXhFO0FBQ0FQLGFBQVNPLE9BQVQ7QUFDRCxHQVBEO0FBU0QsQ0FiRDs7QUFrQkE7QUFDQTlCLElBQUkrQixJQUFKLENBQVMsUUFBVCxFQUFtQixDQUFDQyxHQUFELEVBQU1DLEdBQU4sS0FBYztBQUMvQixNQUFJQyxZQUFZQyxLQUFLQyxLQUFMLENBQVdKLElBQUlLLElBQUosQ0FBUzFCLElBQXBCLENBQWhCO0FBQ0FILFVBQVFDLEdBQVIsQ0FBWSwyQkFBWixFQUF5Q3lCLFNBQXpDO0FBQ0FiLFlBQVVhLFNBQVYsRUFBcUIsQ0FBQ0wsR0FBRCxFQUFNQyxPQUFOLEtBQWtCO0FBQ3JDLFFBQUlELEdBQUosRUFBUztBQUNQSSxVQUFJSyxVQUFKLENBQWUsR0FBZjtBQUNEO0FBQ0RMLFFBQUlNLElBQUosQ0FBU1QsT0FBVDtBQUNELEdBTEQ7QUFPRCxDQVZEOztBQVlBOUIsSUFBSStCLElBQUosQ0FBUyxZQUFULEVBQXVCLENBQUNDLEdBQUQsRUFBTUMsR0FBTixLQUFjLENBQUUsQ0FBdkM7O0FBRUFqQyxJQUFJK0IsSUFBSixDQUFTLFFBQVQsRUFBbUIsQ0FBQ0MsR0FBRCxFQUFNQyxHQUFOLEtBQWMsQ0FBRSxDQUFuQzs7QUFLQSIsImZpbGUiOiJzZXJ2ZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBleHByZXNzID0gcmVxdWlyZSgnZXhwcmVzcycpO1xuY29uc3QgYXBwID0gZXhwcmVzcygpO1xuY29uc3QgcG9ydCA9IDQ1Njg7XG5cbmNvbnN0IHBhcnNlciA9IHJlcXVpcmUoJ2JvZHktcGFyc2VyJyk7XG5jb25zdCBtb3JnYW4gPSByZXF1aXJlKCdtb3JnYW4nKTtcbmNvbnN0IHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG5jb25zdCBjb3JzID0gcmVxdWlyZSgnY29ycycpO1xuY29uc3QgbXlzcWwgPSByZXF1aXJlKCdteXNxbCcpO1xuXG5hcHAubGlzdGVuKHBvcnQsICgpID0+IHtjb25zb2xlLmxvZyhgU2VydmVyIGlzIGxpc3RlbmluZyBvbiBwb3J0ICR7cG9ydH1gKX0pO1xuXG5hcHAudXNlKHBhcnNlci5qc29uKCkpO1xuYXBwLnVzZShwYXJzZXIudXJsZW5jb2RlZCgpKTtcbmFwcC51c2UoY29ycygpKTtcbmFwcC51c2UoZXhwcmVzcy5zdGF0aWMoJ3B1YmxpYycpKTtcblxuLy8gRXN0YWJsaXNoIGNvbm5lY3Rpb24gd2l0aCBkYXRhYmFzZSB1c2luZyBteXNxbC5jcmVhdGVDb25uZWN0aW9uXG5cbmNvbnN0IGRiID0gbXlzcWwuY3JlYXRlQ29ubmVjdGlvbih7XG4gIGhvc3Q6ICdsb2NhbGhvc3QnLFxuICB1c2VyOiAndHJldm9yJyxcbiAgcGFzc3dvcmQ6ICdmbGFtaW5nbycsXG4gIGRhdGFiYXNlOiAnc2hvcHBpbmdjYXJ0J1xufSk7XG5cbmRiLmNvbm5lY3QoKTtcblxuLy8gRGVmaW5lIG1vZGVsIGZ1bmN0aW9ucyBmb3IgaW50ZXJhY3Rpb25zIHdpdGggREJcbmNvbnN0IHBvc3RVc2VycyA9ICh1c2VySW5mbywgY2FsbGJhY2spID0+IHtcbiAgbGV0IHF1ZXJ5U3RyaW5nID0gJ0lOU0VSVCBJTlRPIHVzZXJzIFZBTFVFUygwLCA/LCA/LCA/LCBOVUxMLCBOVUxMLCBOVUxMLCBOVUxMLCBOVUxMLCBOVUxMLCBOVUxMLCBOVUxMLCBOVUxMKSc7XG4gIGxldCBxdWVyeUFyZ3MgPSBbdXNlckluZm8ubmFtZSwgdXNlckluZm8uZW1haWwsIHVzZXJJbmZvLnBhc3N3b3JkXTtcblxuICBkYi5xdWVyeShxdWVyeVN0cmluZywgcXVlcnlBcmdzLCAoZXJyLCByZXN1bHRzKSA9PiB7XG4gICAgaWYgKGVycikge1xuICAgICAgY29uc29sZS5sb2coJ0xvZ2dpbmcgZXJyb3IgZnJvbSBpbnNlcnQgPT4gJywgZXJyKTtcbiAgICAgIGNhbGxiYWNrKGVycik7XG4gICAgfVxuICAgIGNvbnNvbGUubG9nKCdRdWVyeSBpbnNlcnRlZCBzdWNjZXNzZnVsbHksIGdhdmUgYmFjayB0aGVzZSByZXN1bHRzID0+ICcsIHJlc3VsdHMpO1xuICAgIGNhbGxiYWNrKHJlc3VsdHMpO1xuICB9KTtcblxufTtcblxuXG5cblxuLy8gU2V0IHVwIHJvdXRlcyB0byBhcHByb3ByaWF0ZSBmdW5jdGlvbnNcbmFwcC5wb3N0KCcvdXNlcnMnLCAocmVxLCByZXMpID0+IHtcbiAgdmFyIHVzZXJJbnB1dCA9IEpTT04ucGFyc2UocmVxLmJvZHkuanNvbik7XG4gIGNvbnNvbGUubG9nKCdMb2dnaW5nIHVzZXJJbnB1dCBvYmogPT4gJywgdXNlcklucHV0KTtcbiAgcG9zdFVzZXJzKHVzZXJJbnB1dCwgKGVyciwgcmVzdWx0cykgPT4ge1xuICAgIGlmIChlcnIpIHtcbiAgICAgIHJlcy5zZW5kU3RhdHVzKDQwNCk7XG4gICAgfVxuICAgIHJlcy5zZW5kKHJlc3VsdHMpO1xuICB9KTtcblxufSk7XG5cbmFwcC5wb3N0KCcvYWRkcmVzc2VzJywgKHJlcSwgcmVzKSA9PiB7fSk7XG5cbmFwcC5wb3N0KCcvY2FyZHMnLCAocmVxLCByZXMpID0+IHt9KTtcblxuXG5cblxuLy8gU2V0IHVwIERCcyBpbiBzZXBhcmF0ZSBmaWxlXG5cblxuXG5cblxuXG4iXX0=